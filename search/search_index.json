{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Software Development","text":"<p>Articles covering an extensive range of subjects related to software development practices and tools, with a specialisation on Clojure programming.</p> <p>Practical.li provides free online books covering practical guides to Clojure programming and development workflows.  Practicalli Engineering Playbook contains specific guides across the full spectrum of software development.</p>"},{"location":"#sponsor","title":"Sponsor","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is currently done with personal time and cost.</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p> <p>Powered by Material for MkDocs</p>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/","title":"Deeper understanding of Clojure CLI","text":"<p>CLI tools make Clojure very accessible and simple to install as they are a essentially a wrapper for running Clojure code using the <code>java</code> command and use additional libraries to manage dependencies, class paths, create projects and build java archive (jar) files.</p> <p>Newer content can be found in Using Clojure tools section of Practicalli Clojure</p> <p>This article follows on from getting started with Clojure CLI tools</p> <p>Its quite common to use the <code>java</code> command to run your code in production, usually defined in a shell script.  Leiningen can be used to run your application in production too, however, because Leiningen creates 2 JVM instances (one for itself and one for the application), its more efficient to just use the <code>java</code> command.</p> <p>Leiningen does provides a very rich set of templates that speed up development with Clojure and has a multitude of plugins. Plugins provide a rich source of features but they are not very composable, especially compared to the Clojure language itself.</p> <p>Clojure CLI tools provide a minimal but elegant layer on top of the <code>java</code> command and enables libraries, configuration and code to compose together just like Clojure functions.  So we will continuing the exploration of Clojure CLI tools and dig a little deeper under the covers to understand how they work and how to configure projects to be very flexible, especially the different sources of code you can use .</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#under-the-covers-of-clojure-cli","title":"Under the covers of CLojure CLI","text":"<p>Using the command <code>lein new app classic</code> creates a simple project called <code>classic</code> containing some source code and test code.  We can use <code>lein repl</code> to give instant feedback on the evaluation of the code in our project.</p> <p>This command also compiles our code to Java bytecode, so it can run on the JVM just like compiled Java or Scala code.</p> <p><code>lein jar</code> and more commonly <code>lein uberjar</code> is used to package up our code into a single file.  These commands compile the Clojure code into classes when Ahead Of Time compilation is used.  Any namespaces with <code>(:gen-class)</code> directive included in compiled into a JVM bytecode class is <code>lein uberjar</code> creates a single file that contains our application and the Clojure library, so we can use with the java command line</p> <p><code>java -cp target/myproject-standalone.jar</code></p> <p>If I had created a library project, with <code>lein new classic</code>, then I would need to specify clojure.main and the main class for the <code>java</code> command to work correctly.</p> <p><code>java -cp target/myproject-standalone.jar clojure.main -m classic.core</code></p> <p>It is also possible to run the compiled source code, however, we will also need to add Clojure as a dependency.  There is a copy of the Clojure library in my maven cache from previous projects I have worked on.</p> <p><code>java -cp target/uberjar/classes/:/home/jr0cket/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar classic.core</code></p> <p>If I just wanted to run a repl, I can call clojure.main as my namespace</p> <p><code>java -cp /home/jr0cket/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar clojure.main</code></p> <p>Already there are a few things to remember. As your project gets bigger then the command you use will get bigger and harder to manage safely, its often put into scripts but then there is no real validation that you got the script right, without some manual testing</p> <p><code>java $JVM_OPTS -cp target/todo-list.jar clojure.main -m todo-list.core $PORT</code></p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#clojure-cli-tools","title":"Clojure CLI tools","text":"<p>It is very easy to create a project for CLI tools, using the <code>clojure</code> command or the <code>clj</code> wrapper for that command, which will use a readline to improve the command line experience.</p> <p>CLI tools project only requires a <code>deps.edn</code> file, a default file comes with the CLI tools install.</p> <p><code>~/.clojure/deps.edn</code> is created the first time you run the <code>clojure</code> command.</p> <p><code>/usr/local/lib/clojure/deps.edn</code> contains a few basic options that are applied to all projects.</p> <p><code>src</code> is set as the relative path to the source code</p> <p>The dependencies include <code>1.10.1</code> version of the Clojure library.</p> <p>Aliases define additional libraries that will only be included during development, in this case <code>org.clojure/tools.deps.alpha</code> which is used to find and download project dependencies and build a classpath for the project.</p> <p>Finally maven central and clojars are the repositories where dependencies are downloaded from.</p> <pre><code>{\n  :paths [\"src\"]\n\n  :deps {\n    org.clojure/clojure {:mvn/version \"1.10.1\"}\n  }\n\n  :aliases {\n    :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version \"0.6.496\"}}}\n    :test {:extra-paths [\"test\"]}\n  }\n\n  :mvn/repos {\n    \"central\" {:url \"https://repo1.maven.org/maven2/\"}\n    \"clojars\" {:url \"https://repo.clojars.org/\"}\n  }\n}\n</code></pre>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#a-simple-project-configuration","title":"A simple project configuration","text":"<p>nside.</p> <p>There is some duplication of the configurations</p> <pre><code>{:paths [\"src\"]\n\n :deps\n {org.clojure/clojure {:mvn/version \"1.10.1\"}}\n\n :aliases\n {:test {:extra-paths [\"test\"]\n         :extra-deps {com.cognitect/test-runner\n                       {:git/url \"https://github.com/cognitect-labs/test-runner.git\"\n                        :sha \"cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b\"}}\n         :main-opts [\"-m\" \"cognitect.test-runner\"]}}}\n</code></pre> <p>The cognitect-labs/test-runner is a recent project so we are including this directly from its GitHub repository.  We use the latest commit https://github.com/cognitect-labs/test-runner/commit/cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b</p> <p>Using the Git commit removes the need to create a Jar file from the source code.</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#time-for-some-test-driven-development","title":"Time for some Test Driven Development","text":"<p>Create a new file in the <code>test</code> directory called <code>core_test.clj</code> that contains a test with two assertions.</p> <p>The <code>clojure.test</code> namespace is included in the <code>org.clojure/clojure</code> dependency, so we do not have to add anything to the <code>deps.edn</code> file</p> <pre><code>(ns simple.core-test\n  (:require [simple.core :as sut]\n            [clojure.test :refer [deftest testing is]]))\n\n\n(deftest core-tests\n  (testing \"The correct welcome message is returned\"\n    (is (= (sut/-main)\n           \"Hello World!\"))\n\n    (is (= (sut/-main \"Welcome to the Clojure CLI\")\n           \"Hello World! Welcome to the Clojure CLI\"))))\n</code></pre> <p>We run the failing tests with the following command</p> <pre><code>clj -A:test\n\nChecking out: https://github.com/cognitect-labs/test-runner.git at cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b\n\nRunning tests in #{\"test\"}\nSyntax error compiling at (simple/core_test.clj:8:26).\nNo such var: sut/-main\n\nFull report at:\n/tmp/clojure-3370388766424088668.edn\n</code></pre> <p>You can see that the first time we are using the test-runner the CLI tools download the source code from the Git repository.</p> <p>NOTE: Using a Git commit provides just a stable dependency as Maven or other tool.  The only risk is if you are using a shared repository and a force commit is made that replaces the commit you have as dependency, but that will have a different hash value, so you will notice that kind of change when running your code.</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#and-now-some-code","title":"And now some code","text":"<p>Everything is working correctly and the tests are failing because we have not written the code that the test is using.  So write the application code and make the test pass and execute the test runner again.</p> <pre><code>(ns hello.core)\n\n(defn -main []\n  (println \"Hello world!\"))\n</code></pre>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#extra-dependencies","title":"Extra dependencies","text":"","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#over-ride","title":"Over-ride","text":"<p>Use different versions of dependencies in your project that is set globally.  One example is if you are actively building a project, you may want to include the latest commit on a feature branch.  Or you may be using a third party library and want to test out a new beta version.  Or perhaps you are releasing a library and want to test it with earlier versions of Clojure, for example.</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#example","title":"Example","text":"<p>0383381021e03691dff101a9b12accb79e9a4e10</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#jvm-options","title":"JVM options","text":"<p>Passing options to the Java Virtual Machine can be very important to shape the performance dynamics of your Clojure application.  For example, not enough memory allocation can really grind your application to a halt.  I experienced this with a third party Java project, they only had 512Mb as the memory allocation size and after a number of uses we working with it then it would steadily grind to a halt.  Doubling the JVM memory allocation made the application fly for hundreds of concurrent users.</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#configuration-options-useful-for-cljs","title":"Configuration options useful for CLJS","text":"<p>:output-dir to define where the resulting JavaScript file is written too when compiling ClojureScript.  This is used for a different build, e.g. <code>deploy</code> to</p>","tags":["clojure-cli"]},{"location":"2023/10/21/deeper-understanding-of-clojure-cli/#deployment","title":"Deployment","text":"<p>We saw that Leiningen created a single file that we can use to deploy our application and call from the <code>java</code> command line.</p> <p>depstar is a CLJ tools based uberjar tool</p> <pre><code>{\n  :aliases {:depstar\n              {:extra-deps\n                 {seancorfield/depstar {:mvn/version \"0.2.4\"}}}}\n}\n</code></pre> <p>Create an uberjar file using</p> <pre><code>clojure -A:depstar -m hf.depstar.uberjar simple.jar\n</code></pre> <p>To run the generated jar file</p> <p>java -cp simple.jar clojure.main -m simple.core</p> <p>depstar does not do any ahead of time compilation (AOT) so your application may start up more slowly as the code first needs to be compiled into Java byte code.</p> <p>https://github.com/clojure/clojure/commit/653b8465845a78ef7543e0a250078eea2d56b659</p> <p>Thank you.  practicalli-johnny</p>","tags":["clojure-cli"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/","title":"Accessing AWS with Clojure from scratch - simple approach","text":"<p>Cognitect Labs AWS API is an excellent data driven Clojure library for interacting with AWS from code.  Essentially a client for an AWS Service is created which operations are invoked.  The project includes working code examples (once a working AWS account is configured).</p> <p>The hardest is configuring suitable AWS accounts, programmatic access and service permissions, especially when new to AWS.  This article starts with nothing and steps through the simplest and quickest AWS account and permission setup, using the \"AWS Free Tier\".  Note: every service has quota limits and some services are only free for a period of time (free trials &amp; 12 months free).</p> <p>The approach outlined is not intended for commercial work, only the bare essentials to start exploring what is possible with the Cognitect Labs library.  (Or you could try out LocalStack if you have docker installed locally).</p> <p>Avoid this approach for sesitive accounts</p> <p>Avoid approach for personal or company projects containing sensitive information**</p> <p>Credit card required</p> <p>A working credit card is required to setup a root account and AWS will charge the card $1 to verify identity and that the card is legitimate.  This amount will be returned within 3-5 days.</p> <p>Apart from the temporary charge, this approach should not incur any charges so long as the account stays within the free plan limits.  Recommend using a digital card that can be set to frozen when not explicitly used as a safety precaution.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#create-root-account","title":"Create Root account","text":"<p>A root account is used for administration of an Amazon Web Service (AWS) account. This includes management of IAM accounts which are used for day to day work and programmatic (code) access.</p> <p>Create a root account by singing up for AWS</p> <p>Enter an email for the root account and a name for the AWS account</p> <p></p> <p>An email is sent to the address entered with a verification code.  Enter the code and select Verify</p> <p></p> <p>Generate a secure password for the root account, e.g. using a Password Manager such as NordPass or 1Password</p> <p></p> <p>Save the account password with your favourite password manager</p> <p>Select Personal plan as this account is only used for personal projects &amp; hacking (not cracking).</p> <p>Complete contact information with your actual details (used when AWS confirms the credit card is legitimate) and confirm the AWS Customer Agreement.</p> <p></p> <p>Enter details of a valid credit/debit card.  AWS will charge $1 to the card, which will be returned in 3-5 days.</p> <p></p> <p>Confirm identity</p> <p>NOTE: do not include spaces in the security code even if they are in the image</p> <p>Select Send SMS</p> <p></p> <p>Confirm identity pin number</p> <p>4 digit code (dont use the 5 digit phone number by mistake)</p> <p></p> <p>Select support plan - Basic support - Free</p> <p>Select Complete Sign up</p> <p></p> <p>Congratulations</p> <p>An email will be sent to the root account address once the account is ready, which make take a few minutes.</p> <p>Take a break from the form filling by stretching and taking some deep breaths.</p> <p></p> <p>IAM Multi-Factor Authentication (MFA)</p> <p>Visit the IAM dashboard and add Multi-Factor authentication (MFA) to the root user account for additional security.  Practicalli uses the Authy app for Multi-Factor authentication</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#iam-user-for-code-cli","title":"IAM User for Code &amp; CLI","text":"<p>Login to AWS Management Console with root account</p> <p>Search for and select IAM and create a new IAM user</p> <p></p> <p>Select Add user to group</p> <p>Create new group and assing it to the user</p> <p></p> <p>The group should be assigned Permission policies to access the relevant AWS services, e.g. AwsS3FullAccess</p> <p></p> <p>Ensure the new user is added to the group (I missed this step out initially and access was not allowed)</p> <p></p> <p>Once the IAM user has been created, create an Access Key (key and secret)</p> <p>Select the Security credentials tab in the user summary</p> <p>Select Command Line Interface (CLI) and tick the check box to understand this isnt the recommended approach.</p> <p></p> <p>Retrieve the access key details so they can be used when configuring the AWS CLI tool.</p> <p></p> <p>In a commercial environment, the operations team should create an IAM account for you, so this step is only relevant for your own education.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#install-aws-cli-2","title":"Install AWS CLI 2","text":"<p>AWS Command Line Interface (AWS CLI) is a unified tool to control multiple AWS services from the command line and automate them through scripts.</p> <p>The AWS CLI configuration can also be used by Clojure code using the Cognitect Labs AWS API library.</p> <p>Download the install script archive file</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> <p>Extract the install script which extract to a directory called <code>aws</code></p> <pre><code>unzip awscliv2.zip\n</code></pre> <p>Run the install script, providing the user password when prompted</p> <pre><code>sudo ~/aws/install\n</code></pre> <p>The install script can also be used to update an existing version of the AWS CLI version 2 (but not AWS CLI version 1)</p> <pre><code>sudo ~/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n</code></pre>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#configure-aws-cli","title":"Configure AWS CLI","text":"<p>Use AWS CLI to create a configuration, using its wizard</p> <pre><code>aws configure\n</code></pre> <p>Enter the access key and access key secret from the IAM account when prompted</p> <p>Enter the default region, e.g. eu-west-1 for Ireland</p> <p>The wizard creates two files</p> <ul> <li><code>~/.aws/config</code> containing the <code>default</code> profile</li> <li><code>~/.aws/credentials</code> containing the AWS access key and secret (this is a plain text file, so not secure if someone hacks into your computer)</li> </ul> <p>An aws_session_token is not required, even though the AWS documentation mentions it repeatedly (but neglects to tell you how to create it)</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#install-clojure","title":"Install Clojure","text":"<p>Practicalli guide to install Clojure CLI, Java and Practicalli Clojure CLI Config for a wide range of community tools.</p> <p>Leiningen should also work, although this tool was not tested</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#cognitect-labs-aws-apis","title":"Cognitect Labs AWS API's","text":"<p>Now for the easy part :)</p> <p>Create a new Clojure project, e.g. using the <code>:project/create</code> from Practicalli Clojure CLI</p> <pre><code>clojure -T:project/create :template app :name practicalli/bucket-of-data\n</code></pre> <p>Edit the <code>deps.edn</code> file and add the Cognitect Labs AWS API, Endpoints and S3 libraries</p> <pre><code>  com.cognitect.aws/api {:mvn/version \"0.8.666\"}\n  com.cognitect.aws/endpoints {:mvn/version \"1.1.12.456\"}\n  com.cognitect.aws/s3 {:mvn/version \"847.2.1365.0\"}\n</code></pre> <p>latest-release.edn listed all the libraries and their current version</p> <p>Start repl the repl, e.g. using the Practicalli REPL Reloaded workflow or from an editor</p> <pre><code>clojure -M:repl/reloaded\n</code></pre> <p>Open <code>src/practicalli/bucket_of_data.clj</code> file in a Clojure aware editor &amp; connect to the REPL process (if the editor was not used to start the REPL process)</p> <p>Create a rich comment and start to experiment with the Cognitect Labs AWS API library.</p> <p>Example creating an S3 bucket, adding a file and reading the contents of a file.</p> <p>Require the main library</p> <pre><code>(require '[cognitect.aws.client.api :as aws])\n</code></pre> <p>Define a client for the AWS S3 service</p> <pre><code>(def data-bucket (aws/client {:api :s3}))\n</code></pre> <p>Validate requests to the S3 service to report incorrect arguments (especially useful when starting out with the library).  Underlying this is a Clojure specification derived from the AWS specifications.</p> <pre><code>(aws/validate-requests data-bucket true)\n</code></pre> <p>Credentials are required for this request, so its a useful test to ensure the AWS CLI is configured correctly.</p> <pre><code>(aws/invoke data-bucket {:op :ListBuckets})\n</code></pre> <p>A REPL restart (stop/start) is required if the AWS environment variables are changed, otherwise the updated values in those environment variables will not be used.</p> <p>As Cognitect Labs AWS API has a complete specification for each service, all the available operations for a specific service can be listed (even if the credentials are not working)</p> <p>List the S3 Service operations.  Note, this returns a big data structure, so I find it useful to look at it in a data inspector, e.g. Portal, Cider Inspector or Morse</p> <pre><code>(aws/ops data-bucket)\n</code></pre> <p>Once the name of the operation is know, view the documentation to see how it is used.</p> <pre><code>(aws/doc data-bucket :CreateBucket)\n</code></pre> <p></p> <p>The Practicalli REPL Reloaded workflow launches Portal at startup and all evaluations are sent to the Portal UI, so its easy to navigate the large list of operations for an AWS service.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#sso-account-approach","title":"SSO Account approach","text":"<p>Single sign-on access can be used for engineers and command line access.</p> <p>The recommended approach is to use the AWS IAM Identity Center as a Single Sign-On (SSO) service.  The IAM Identity Center can manage users and accounts in its own directory, useful for personal AWS accounts (and probably brand new startups too). The IAM Identity Center can use qn external identity provider instead, e.g. Okta, Google Workspace, Active Directory, etc.</p> <p>An AWS Organisation is required to enable IAM Identity Center. It can take up to 24 hours for AWS to create an organisation if one does not already exist for the AWS account.</p> <p>The IAM Identity Center approach will be covered in a future article.</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/#summary","title":"Summary","text":"<p>This is only the start of using AWS from Clojure and almost all the work was to simply configuring AWS itself.</p> <p>There are lots of services to explore on AWS and with a working account and credentials and the excellent Cognitect Labs AWS API library it should be relatively straight forward (fingers crossed).</p> <p>Please to keep a considered eye on how much of AWS you are using.  Even though a free plan was used, it can be quite easy to leave things running and exceed quotas.  Its not clear as yet if AWS will stop the service or simply send a bill.  Taking a look at the quotas allowed for a service is a valuable step to ensure you can remain within the free plan.</p> <p>Thank you</p> <p> practicalli GitHub profile I @practical_li</p>","tags":["aws","clojure","cognitect-labs"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/","title":"FreeDesktop.org XDG standard for Clojure development tools","text":"<p>The  FreeDesktop.org XDG basedir standard defines specific locations to store all user configuration, data files and caches.</p> <p>Without the XDG standard, these files and directories are often mixed together and stored in the <code>$HOME</code>  of the users account, making it more challenging to backup or version control.</p> <p>Development tools such as NeoVim, Emacs, Clojure CLI  and Clojure LSP support the XDG specification, although some tools like Leiningen required a little help.  There are simple approaches to work-around the limitations of tools that don't conform.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#freedesktop-xdg-standards","title":"FreeDesktop XDG Standards","text":"<p>FreeDesktop.org produces standards under the Cross-Desktop Group, referred to as XDG.</p> <p>Two of the most relevant specifications for users are:</p> <ul> <li>Desktop base directories (basedir): defining the location of application configuration and data files</li> <li>Desktop entries (.desktop): to define executable, application name, icon and description, used by application launchers and desktop menus</li> </ul> <p>This article will focus on the basedir configuration and document the XDG locations for a range of common developer tools</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#xdg-environment-variables","title":"XDG Environment variables","text":"<p>The XDG Base Directory Specification defines specific environment variables to define each locations, usually set in the configuration file of the operating system shell, e.g. zsh, bash, fish.</p> <p>Each location contains application specific files within a directory of the same name as that application, e.g. <code>XDG_CONFIG_HOME/git</code> for Git version control client.</p> <ul> <li><code>XDG_CONFIG_HOME</code> user-specific configuration files, default <code>$HOME/.config</code></li> <li><code>XDG_DATA_HOME</code> user-specific data files. default <code>$HOME/.local/share</code></li> <li><code>XDG_STATE_HOME</code> user-specific state data <code>$HOME/.local/state</code></li> <li><code>XDG_CACHE_HOME</code> user-specific non-essential (cached) data, default <code>$HOME/.cache</code></li> <li><code>XDG_RUNTIME_DIR</code> runtime files bound to the login status of the user</li> </ul> <p><code>XDG_CONFIG_DIRS</code> and <code>XDG_DATA_DIRS</code> can be used to define an ordered set of directories to search for their respective files, rather than just a single directory.</p> <p>Environment variables must be set to an absolute path to be consider valid.  Values can include other environment variables, e.g. HOME, as long as the path resolves as absolute.</p> <p>A detailed description is covered in the freedesktop.org basedir specification.</p> MacOSX FreeDesktop.org XDG Standard Paths <p>According to Apple documentation, the XDG Base directory specifications should use these locations</p> <ul> <li><code>XDG_CONFIG_HOME</code> -\ufe0e <code>~/Library/Preferences/</code> using reverse domain name notation: <code>com.apple.AppStore.appname</code></li> <li><code>XDG_DATA_HOME</code> -\ufe0e <code>~/Library/</code></li> <li><code>XDG_CACHE_HOME</code> -\ufe0e <code>~/Library/Caches/</code></li> </ul> <p>See the Mac OS X Reference Library: Where to Put Application Files and Mac OS X Reference Library: Important Java Directories on Mac OS X</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#configuring-linux-unix-operating-system","title":"Configuring Linux / Unix operating system","text":"<p>The XDG basedir specification is used by many Unix distributions, although the <code>XDG_CONFIG_HOME</code> is rarely set as it may break older applications.  Instead the OS uses the default locations in the specifications and expects applications to do the same.</p> <p>Some tools already use the default location of <code>XDG_CONFIG_HOME</code>. Most maintained tools will use the XDG locations if the environment variables are set.</p> <p>Defining <code>XDG_CONFIG_HOME</code> before installing development tools and applications helps ensure that the right locations are used.</p> <p>Existing configurations are easily migrated to the <code>XDG_CONFIG_HOME</code> directory, either all at once or application by application.  If the configuration is not found in <code>XDG_CONFIG_HOME</code> the application should look for the configuration in the <code>HOME</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#where-to-set-environment-variables","title":"Where to Set environment variables","text":"<p>For desktop launchers, edit the <code>.profile</code> file and export a value for <code>XDG_CONFIG_HOME</code>, which should then be used by all applications launched in this way.</p> <p>For example, the <code>XDG_CONFIG_HOME</code> is defined for all applications and <code>SPACEMACSDIR</code> is defined specifically for Spacemacs configuration for Emacs.</p> <pre><code># Ensure XDG_CONFIG_HOME is set when launching apps from destktop\nexport XDG_CONFIG_HOME=$HOME/.config\n\n# Application specific\nexport SPACEMACSDIR=$XDG_CONFIG_HOME/spacemacs\n\n\n# Recommended locations\nexport XDG_DATA_HOME=$HOME/.local/share\nexport XDG_CACHE_HOME=$HOME/.cache\nexport XDG_STATE_HOME=$HOME/.local/state\n</code></pre> <p>To apply these environment variables, logout of the desktop environment, then login again.  Now the environment variables are set.</p> <p>To test before logout/login, in a terminal run the command <code>source ~/.profile</code> and the environment variables will be available in that terminal session.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#command-line","title":"Command Line","text":"<p>The shell and all command line tools will use environment variables in <code>~/.profile</code>.  Or they can be set in the respective resource files for the terminal shell to add environment variables</p> <ul> <li>bash - use <code>~/.bashrc</code></li> <li>zsh - use <code>~/.zprofile</code> or <code>.zshenv</code></li> </ul> <p>For example, in <code>~/.zprofile</code>:</p> <pre><code># Set XDG_CONFIG_HOME for clean management of configuration files\nexport XDG_CONFIG_HOME=\"$XDG_CONFIG_HOME=$HOME/.config\"\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#zsh-prezto","title":"Zsh - prezto","text":"<p>Prezto is an rich configuration for Zsh that provides aliases, functions, auto completion and prompt themes (including the popular Powerline10k theme). Prezto includes a wide range of optional modules such as git status, autosuggestions (fish shell completion), GPG, etc.</p> <p></p> <p>Install prezto in the <code>XDG_CONFIG_HOME/zsh</code> directory.</p> <pre><code>git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${XDG_CONFIG_HOME}/prezto\"\n</code></pre> <p>Prezto requires <code>~/.zshenv</code> to bootstrap the location of prezto configuration.  The <code>~/.zshenv</code> file can be a symbolic link to <code>XDG_CONFIG_HOME/zsh/.zshenv</code></p> <p>Set the <code>XDG_CONFIG_HOME</code> location to <code>HOME/.config</code> for all applications if not set in <code>~/.profile</code></p> <p>Set the <code>ZDOTDIR</code> location so Zsh can find the Prezto configuration.</p> <pre><code># Set XDG_CONFIG_HOME for clean management of configuration files\nexport XDG_CONFIG_HOME=\"${XDG_CONFIG_HOME:=$HOME/.config}\"\nexport ZDOTDIR=\"${ZDOTDIR:=$XDG_CONFIG_HOME/zsh}\"\n</code></pre> <p>Other application specific environment variables should be added to <code>.zshevn</code> file as well, e.g. <code>SPACEMACSDIR</code> for Spacemacs configuration.</p> <p>TIP: Once installed, any prezto configuration files that will be added can be copied from the <code>.zprezto/runcoms</code> directory to <code>XDG_CONFIG_HOME/zsh</code>, rather than linking as the documentation suggests. This approach minimises the need to merge changes when updating prezto.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#neovim","title":"Neovim","text":"<p>Neovim supports the XDG basedir specification and will use <code>~/.config/nvim</code> directory by default.</p> <p>All the packages installed, such as the excellent Conjure for Clojure development (and many other fun languages), will therefore be part of the <code>~/.config/neovim</code> configuration.</p> <p>Vim does not support the basedir.  However, when Neovim is installed as a .deb package it will be used for the vim command (set via <code>/etc/alternatives/vim</code>)</p> <p>Practicalli Neovim is the start of a new book on setting up Neovim with Clojure, LSP, Treesitter and many other packages, using fennel (a lisp dialect) for its configuration.  More details coming soon.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#emacs-and-spacemacs-configuration","title":"Emacs and Spacemacs Configuration","text":"<p>Emacs will use <code>XDG_CONFIG_HOME/emacs</code> location if it contains an <code>init.el</code> file.</p> <p><code>SPACEMACSDIR</code> environment variable is used by Spacemacs to set the <code>dotspacemacs-directory</code>, defining where to look for the Spacemacs specific <code>init.el</code> file.</p> <p>Set <code>SPACEMACSDIR</code> to <code>XDG_CONFIG_HOME/spacemacs</code></p> <pre><code># Ensure XDG_CONFIG_HOME is set when launching apps from destktop\nexport XDG_CONFIG_HOME=\"$HOME/.config\"\n\n# Ensure Emacs can find the location of Spacemacs configuration\n# when using a desktop launcher\nexport SPACEMACSDIR=\"$XDG_CONFIG_HOME/spacemacs\"\n</code></pre> <p>Move the <code>.spacemacs</code> file to <code>XDG_CONFIG_HOME/spacemacs/init.el</code>.  Or if using <code>~/.spacemacs.d/</code> then move that directory to be the <code>XDG_CONFIG_HOME/spacemacs/</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#authinfo-secure-credentials","title":"authinfo secure credentials","text":"<p>Connection credentials that include sensitive data (passwords, developer tokens) can be stored in <code>authinfo.pgp</code>, a PGP encrypted file. This providing an extra level of security for sensitive data.</p> <p>For example, Magit Forge uses authinfo.gpg to define a connection to GitHub or GitLab that includes a developer token.</p> <pre><code>  ;; Use XDG_CONFIG_HOME location or HOME\n  (setq auth-sources (list\n                      (concat (getenv \"XDG_CONFIG_HOME\") \"/authinfo.gpg\")\n                      \"~/.authinfo.gpg\"))\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#doom-emacs","title":"Doom Emacs","text":"<p>If Emacs configuration is detected in <code>$HOME/.config/emacs</code> then Doom will install its configuration in <code>$HOME/.config/doom</code>, so long as <code>DOOMDIR</code> has not already been configured to a different location by the user.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#git","title":"Git","text":"<p>Git will write to and read from <code>XDG_CONFIG_HOME/git/config</code> as its configuration, if that file exists and <code>~/.gitconfg</code> does not exist.  Otherwise <code>~/.gitconfg</code> is used.</p> <p>Before running any <code>git</code> commands, create a config file in the XDG location</p> <pre><code>mkdir  $XDG_CONFIG_HOME/git &amp;&amp; touch  $XDG_CONFIG_HOME/git/config\n</code></pre> <p><code>git config</code> commands will now update the XDG configuration file, e.g. setting the user identity and configure diff to use the diff3 (shared parent) for merge conflicts</p> <pre><code>git config --global user.name \"John Practicalli\"\ngit config --global user.email \"******+account-name@users.noreply.github.com\"\ngit config --global merge.conflictstyle diff3\n</code></pre> <p>Add an ignore-global file to the <code>XDG_CONFIG_HOME/git</code> directory. Example excludes files can be found at github/gitignore repository or at practicalli/dotfiles</p> <p>Add an excludes file to the Git config file containing the patterns used across all the users projects.</p> <pre><code>git config --global core.excludesFile ~/.config/git/ignore-global\n</code></pre> <p>The git ignore file should be defined with the full path so tools like projectile can find that ignore file.</p> <p><code>XDG_CONFIG_HOME/git/template</code> is a common location for scripts and hooks that should be added to a newly created Git repository, in the <code>.git</code> directory.  The template location is set by <code>init.templatedir</code></p> <pre><code>mkdir  $XDG_CONFIG_HOME/git/template\n\ngit config --global init.templatedir template\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-cli","title":"Clojure CLI","text":"<p>The <code>XDG_CONFIG_HOME/clojure</code> directory is the location for the Clojure CLI user level configuration files (e.g. <code>deps.edn</code>, <code>tools/tools.edn</code>).</p> <p>If <code>XDG_CONFIG_HOME</code> is not set or that location is not found, then <code>HOME/.clojure</code> is used instead.</p> <p>If <code>CLJ_CONFIG</code> is set to a value, then Clojure CLI commands will use that instead.</p> <p>Also see Maven and dependencies to manage the <code>$HOME/.m2/repository</code> directory</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#maven-and-dependencies","title":"Maven and dependencies","text":"<p>Clojure CLI and Leiningen use the Maven configuration directory to store Jar files from project (and tooling) dependencies, by default this is located in <code>$HOME/.m2/repository</code>.</p> <p>Jar files from dependencies are considered non-essential (to the Clojure CLI tool) so should be written to the $XDG_CACHE_HOME location, typically <code>$HOME/.cache</code></p> <p>Add the <code>:mvn/local-repo</code> top-level key in the user level deps.edn file to set a location for the Maven repository.  The value should be the full directory path.</p> <pre><code>:mvn/local-repo \"/home/practicalli/.cache/maven/repository\"\n</code></pre> <p>The <code>:mvn/local-repo</code> can also be used in a project deps.edn file or on the command line, i.e. <code>clojure -Sdeps '{:mvn/local-repo \".cache/temp-deps\"}'</code> if the Maven dependencies should be kept separate from all other projects (this scenario is not common).</p> <p>The Maven <code>$HOME/.m2</code> directory also contains several configuration files, <code>maven.config</code>, <code>jvm.config</code> and <code>extensions.xml</code>, so unfortunately conflates configuration files with data files.  Although Clojure CLI does not use these configuration files, it is useful to separate the jar files into a cache.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-gitlibs","title":"Clojure Gitlibs","text":"<p>Clojure CLI can used dependencies from Git repositories.  To do so, the repository is downloaded into a <code>$HOME/.gitlibs</code> directory, unless the <code>GITLIBS</code> environment variable is set.  As the <code>gitlibs</code> directory contains data for the application, then ideally this would be placed in <code>XDG_CACHE_HOME</code>, under a <code>clojure-gitlibs</code> directory</p> <p>Set the <code>GITLIBS</code> environment variable to determine the location of the local cache directory used to clone dependencies that are Git repositories.</p> <pre><code>export $GITLIBS=$XDG_CACHE_HOME/clojure-libs\n</code></pre> <p>Optionally move the existing <code>$HOME/.gitlibs</code> to the Cache home.</p> <pre><code>mv $HOME/.gitlibs $XDG_CACHE_HOME/clojure-gitlibs\n</code></pre>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#clojure-lsp","title":"Clojure LSP","text":"<p><code>XDG_CONFIG_HOME/clojure-lsp</code> directory is used as the location for Clojure LSP configuration if <code>XDG_CONFIG_HOME</code> is set.  Otherwise, <code>$HOME/.clojure-lsp</code> is used as the configuration.</p> <p>If Clojure LSP was used for for a while, configuration may be in the deprecated <code>~/.lsp</code> directory.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#intellij-idea-and-cursive","title":"Intellij Idea and Cursive","text":"<p>Intellij Idea from version 2020.1 uses the XDG basdir specification locations without the need to set XDG_CONFIG_HOME.</p> <p>Configuration is organised under the ~/.config/JetBrains/ directory with product and version sub-directories, for example:</p> <pre><code>~/.config/JetBrains/IntelliJIdea2022.1\n</code></pre> <p>Intellij IDEA 2020.1 documentation - configuration directories</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#leiningen","title":"Leiningen","text":"<p>Leiningen does not support configuration in <code>XDG_CONFIG_HOME</code>, although there is an outstanding issue to add this as an enhancement from 2016.</p> <p>Once Leiningen is installed, a temporary work-around would be to move the <code>~/.lein</code> directory to <code>XDG_CONFIG_HOME/leiningen</code> and create a symbolic link called <code>~/.lein</code></p> <pre><code>mv ~/.lein $XDG_CONFIG_HOME/leiningen\n\nln -s $XDG_CONFIG_HOME/leiningen ~/.lein\n</code></pre> <p>The <code>lein</code> script uses <code>LEIN_HOME</code> variable, although this is hard-coded in the script to <code>$HOME/.lein</code> and therefore is not usable to set as an operating system environment variable to change the configuration directory location.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#vs-code-and-calva","title":"VS Code and Calva","text":"<p>Unfortunately XDG basedir specification is not currently supported by VS Code and therefore Calva (although I assume the Clojure LSP tooling in Calva will use XDG_CONFIG_HOME)</p> <p>There is an outstanding issue on the VS Code, also from 2016, to revisit the configuration structure and support XDG_CONFIG_HOME.</p> <p>Using the symbolic link workaround, as with Leiningen, should work for VS Code too.</p> <pre><code>mv $HOME/.vscode $XDG_CONFIG_HOME/vscode\nln -s $XDG_CONFIG_HOME/vscode $HOME/.vscode\n</code></pre> <p>It is advisable to close VS Code before moving the configuration, to ensure the configuration has been saved.</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/#summary","title":"Summary","text":"<p>The XDG basedir specification makes it simple to back up and version a users configuration files as they are all under the one directory, i.e. <code>$HOME/.config</code></p> <p>As data and cache files are in different locations, then few if any ignore files are required to version the configuration files.</p> <p>Migrating is relatively quick and painless and applications can be migrated over time if required.</p> <p>Thank you</p> <p>practicalli GitHub profile I @practical_li</p>","tags":["debian","emacs","neovim","clojure-cli"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/","title":"Build Emacs from source on Debian Linux","text":"<p>Emacs 29 is the current stable release, adding major features: Eglot LSP client, Tree-Sitter language parser and <code>package.el</code> package install from Git repositories. </p> <p>Building from source is a convenient way to try Emacs features in advance, especially useful for those maintaining or developing new tools on top of Emacs.</p> Emacs 29 Features <p>Emacs 29 - what to expect - a brief summary of the major features</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#building-steps-for-the-impatient","title":"Building steps for the impatient","text":"<p>Add Ubuntu packages for building Emacs</p> <pre><code>sudo apt build-dep emacs &amp;&amp; \\\nsudo apt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev gnutls-bin libtree-sitter-dev\n</code></pre> <p>Clone Emacs 29 source code, configure and build emacs and then install (in /usr/local/bin/)</p> <pre><code>git clone --branch emacs-29 git://git.savannah.gnu.org/emacs.git emacs-29 &amp;&amp; cd emacs-29 &amp;&amp; \\\nexport CC=/usr/bin/gcc-10  &amp;&amp; export CXX=/usr/bin/gcc-10 &amp;&amp; ./autogen.sh &amp;&amp; ./configure --with-native-compilation=aot &amp;&amp; \\\nmake -j$(proc)  &amp;&amp; /\nsudo make install\n</code></pre> <p>Skip the branch for the very latest commits to Emacs which will effectively become Emacs 30 some time in the next year or so</p> <p>Read the rest of the article for a detailed description of this workflow</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#prepare-ubuntu","title":"Prepare Ubuntu","text":"<p>Open <code>Software &amp; Updates</code> and ensure the Source Code source is enabled and reload the package list (or run <code>sudo apt update</code> in a terminal after adding Source Code)</p> <p></p> <p>Ask Ubuntu to install the packages required to build Emacs (there will be quite a few packages if this is the first software built with GCC on the operating system)</p> <pre><code>sudo apt build-dep -y emacs\n</code></pre> <p>The previous approach was to use <code>sudo apt-get install build-essential gcc git-core</code>. Using build-deps manages the set of packages required as Emacs evolves.</p> <p>Install some additional libraries to support the newest features of Emacs, native compilation of Emacs packages (<code>libgccjit</code>), fast JSON processing (<code>libjansson</code>) and tree-sitter support.  These really boost performance, so are important to add.</p> <pre><code>sudo apt install libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev libtree-sitter-dev\n</code></pre> <p>On Ubuntu 20.04 <code>sudo apt-get install gnutls-bin</code> removes a potential issue from an older certificates library</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#preparing-emacs-source-code","title":"Preparing Emacs source code","text":"<p>Use a Git client to clone the latest code from the Emacs repository, or open a terminal and use the Git command line client</p> <pre><code>git clone git://git.savannah.gnu.org/emacs.git\n</code></pre> <p>To build version of Emacs that is already release, Download source from a nearby GNU mirror, either tar.gz or tar.xz</p> <p>Change into the cloned directory</p> <pre><code>cd emacs\n</code></pre> <p>Set <code>CC</code> and <code>CXX</code> environment variables to inform the Emacs configuration script as to the location of gcc-10, otherwise it fails to find libgccjit</p> <pre><code>export CC=/usr/bin/gcc-10 &amp;&amp; export CXX=/usr/bin/gcc-10\n</code></pre> <p>If CC and CXX environment variables are not set, the configure script will not find important libraries and report errors such as: <code>configure: error: ELisp native compiler was requested, but libgccjit was not found.</code></p> <p>Run the autogen script to create a configure script specific to your operating system.</p> <pre><code>./autogen.sh\n</code></pre> <p>Run the configuration script with the native compilation flag, to compile Emacs native Elisp files during the Emacs compilation rather than when first running Emacs.  This script will check the operating system for tools and libraries needed to build Emacs on your operating system.</p> <pre><code>./configure --with-native-compilation=aot\n</code></pre> <p>Check the output of <code>./configure</code> was successful, see the end of this article for an example.  Ignore warnings about movemail if not using Emacs for local email management.</p> List available Emacs build flags <p><code>./configure --help</code> lists available flags. Generally features are enabled if the required libraries are installed on the operating system.</p> <p>A noticeable exception is native compilation, as its a relatively new feature and not enabled by default.</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#building-emacs-locally","title":"Building Emacs locally","text":"<p>Build Emacs using all the CPU's of your computer.  <code>-j</code> flag specifies the number of CPU's to use, <code>nproc</code> command returns the total number of CPU's for the computer (real and virtual cores combined).</p> <pre><code>make -j$(nproc)\n</code></pre> <p>Run Emacs using the <code>-Q</code> option to check Emacs runs without using a users configuration file (e.g. without loading an `~/.emacs.d/ configuration)</p> <pre><code>./src/emacs -Q\n</code></pre> <p><code>C-x C-c</code> to quit Emacs.</p> <p>If Emacs runs then it is ready to install.</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#install-emacs-system-wide","title":"Install Emacs system wide","text":"<p>Install <code>emacs</code> and <code>emacsclient</code> to <code>/usr/local/bin</code> along with supporting libraries and man pages using the Makefile</p> <pre><code>sudo make install\n</code></pre> <p>To install in a different location, pass the full path using the <code>--prefix</code> option to make, e.g <code>make install --prefix /opt/emacs</code></p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#running-emacs","title":"Running Emacs","text":"<p>If the default <code>/usr/local</code> path was used to install Emacs, then the <code>emacs</code> and <code>emacsclient</code> binary files are already on the executable path</p> <p>In a terminal, run the emacs command</p> <pre><code>emacs\n</code></pre> <p>If using Emacs 28 with Spacemacs for the first time, all Spacemacs packages in your configuration will be downloaded and compiled.  This may take 5-15 minutes and Emacs may make full use of your CPU (spawning several emacs processes on multi-core computers)</p> <p>Leave Emacs for a few minutes running until the CPU activity has subsided and then consider restarting Emacs to ensure the packages have been loaded in the correct order.</p> <p>Expect to see lots of warning messages when installing more than 250 emacs packages.  Ignore these warnings until all packages have been installed.  If warnings still occur after restarting Emacs, then start investigating (or ask questions on #spacemacs channel in the Clojurians Slack community)</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#removing-emacs","title":"Removing Emacs","text":"<p>In the Emacs source code directory where Emacs was built, use the Makefile to remove the Emacs binaries, libraries and man pages.</p> <pre><code>sudo make uninstall\n</code></pre>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#emacs-build-configure-output","title":"Emacs build configure output","text":"<p>Typical output of  <code>./configure --with-native-compilation</code></p> <p>Almost all configuration options should be yes, although there are a few legacy libraries or settings for other OSs that should be no.</p> <pre><code>Configured for 'x86_64-pc-linux-gnu'.\n\n  Where should the build process find the source code?    .\n  What compiler should emacs be built with?               /usr/bin/gcc-10 -g3 -O2\n  Should Emacs use the GNU version of malloc?             no\n    (The GNU allocators don't work with this system configuration.)\n  Should Emacs use a relocating allocator for buffers?    no\n  Should Emacs use mmap(2) for buffer allocation?         no\n  What window system should Emacs use?                    x11\n  What toolkit should Emacs use?                          GTK3\n  Where do we find X Windows header files?                Standard dirs\n  Where do we find X Windows libraries?                   Standard dirs\n  Does Emacs use -lXaw3d?                                 no\n  Does Emacs use -lXpm?                                   yes\n  Does Emacs use -ljpeg?                                  yes\n  Does Emacs use -ltiff?                                  yes\n  Does Emacs use a gif library?                           yes -lgif\n  Does Emacs use a png library?                           yes -lpng16 -lz\n  Does Emacs use -lrsvg-2?                                yes\n  Does Emacs use -lwebp?                                  no\n  Does Emacs use -lsqlite3?                               yes\n  Does Emacs use cairo?                                   yes\n  Does Emacs use -llcms2?                                 yes\n  Does Emacs use imagemagick?                             no\n  Does Emacs use native APIs for images?                  no\n  Does Emacs support sound?                               yes\n  Does Emacs use -lgpm?                                   yes\n  Does Emacs use -ldbus?                                  yes\n  Does Emacs use -lgconf?                                 no\n  Does Emacs use GSettings?                               yes\n  Does Emacs use a file notification library?             yes -lglibc (inotify)\n  Does Emacs use access control lists?                    yes -lacl\n  Does Emacs use -lselinux?                               yes\n  Does Emacs use -lgnutls?                                yes\n  Does Emacs use -lxml2?                                  yes\n  Does Emacs use -lfreetype?                              yes\n  Does Emacs use HarfBuzz?                                yes\n  Does Emacs use -lm17n-flt?                              yes\n  Does Emacs use -lotf?                                   yes\n  Does Emacs use -lxft?                                   no\n  Does Emacs use -lsystemd?                               yes\n  Does Emacs use -ljansson?                               yes\n  Does Emacs use -ltree-sitter?                           yes\n  Does Emacs use the GMP library?                         yes\n  Does Emacs directly use zlib?                           yes\n  Does Emacs have dynamic modules support?                yes\n  Does Emacs use toolkit scroll bars?                     yes\n  Does Emacs support Xwidgets?                            no\n  Does Emacs have threading support in lisp?              yes\n  Does Emacs support the portable dumper?                 yes\n  Does Emacs support legacy unexec dumping?               no\n  Which dumping strategy does Emacs use?                  pdumper\n  Does Emacs have native lisp compiler?                   yes\n  Does Emacs use version 2 of the X Input Extension?      yes\n  Does Emacs generate a smaller-size Japanese dictionary? no\n</code></pre>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#emacs-29-configuration-options","title":"Emacs 29 configuration options","text":"<p>Run configure with <code>--help</code> option to list the available compilation options.  Apart from <code>--with-native-compilation=aot</code> defaults are used when Practicalli compiles Emacs.</p> <pre><code>Optional Packages:\n  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n  --without-all           omit almost all features and build small executable\n                          with minimal dependencies\n  --with-mailutils        rely on GNU Mailutils, so that the --without-pop\n                          through --with-mailhost options are irrelevant; this\n                          is the default if GNU Mailutils is installed\n  --with-pop              Support POP mail retrieval if Emacs movemail is used\n                          (not recommended, as Emacs movemail POP is\n                          insecure). This is the default only on native\n                          MS-Windows.\n  --with-kerberos         support Kerberos-authenticated POP\n  --with-kerberos5        support Kerberos version 5 authenticated POP\n  --with-hesiod           support Hesiod to get the POP server host\n  --with-mail-unlink      unlink, rather than empty, mail spool after reading\n  --with-mailhost=HOSTNAME\n                          string giving default POP mail host\n  --with-sound=VALUE      compile with sound support (VALUE one of: yes, alsa,\n                          oss, bsd-ossaudio, no; default yes). Only for\n                          GNU/Linux, FreeBSD, NetBSD, MinGW, Cygwin.\n  --with-pdumper=VALUE    enable pdumper support unconditionally ('yes', 'no',\n                          or 'auto': default 'auto')\n  --with-unexec=VALUE     enable unexec support unconditionally ('yes', 'no',\n                          or 'auto': default 'auto')\n  --with-dumping=VALUE    kind of dumping to use for initial Emacs build\n                          (VALUE one of: pdumper, unexec, none; default\n                          pdumper)\n  --with-x-toolkit=KIT    use an X toolkit (KIT one of: yes or gtk, gtk2,\n                          gtk3, lucid or athena, motif, no)\n  --with-wide-int         prefer wide Emacs integers (typically 62-bit); on\n                          32-bit hosts, this allows buffer and string size up\n                          to 2GB, at the cost of 10% to 30% slowdown of Lisp\n                          interpreter and larger memory footprint\n  --without-xpm           don't compile with XPM image support\n  --without-jpeg          don't compile with JPEG image support\n  --without-tiff          don't compile with TIFF image support\n  --without-gif           don't compile with GIF image support\n  --without-png           don't compile with PNG image support\n  --without-rsvg          don't compile with SVG image support\n  --without-webp          don't compile with WebP image support\n  --without-sqlite3       don't compile with sqlite3 support\n  --without-lcms2         don't compile with Little CMS support\n  --without-libsystemd    don't compile with libsystemd support\n  --without-cairo         don't compile with Cairo drawing\n  --without-xml2          don't compile with XML parsing support\n  --with-imagemagick      compile with ImageMagick image support\n  --without-native-image-api\n                          don't use native image APIs (GDI+ on Windows)\n  --with-json             compile with native JSON support\n  --with-tree-sitter      compile with tree-sitter\n  --without-xft           don't use XFT for anti aliased fonts\n  --without-harfbuzz      don't use HarfBuzz for text shaping\n  --without-libotf        don't use libotf for OpenType font support\n  --without-m17n-flt      don't use m17n-flt for text shaping\n  --without-toolkit-scroll-bars\n                          don't use Motif/Xaw3d/GTK toolkit scroll bars\n  --without-xaw3d         don't use Xaw3d\n  --without-xim           at runtime, default X11 XIM to off\n  --without-xdbe          don't use X11 double buffering support\n  --with-ns               use Nextstep (macOS Cocoa or GNUstep) windowing\n                          system. On by default on macOS.\n  --with-w32              use native MS Windows GUI in a Cygwin build\n  --with-pgtk             use GTK to support window systems other than X\n  --without-gpm           don't use -lgpm for mouse support on a GNU/Linux\n                          console\n  --without-dbus          don't compile with D-Bus support\n  --with-gconf            compile with Gconf support (Gsettings replaces this)\n  --without-gsettings     don't compile with GSettings support\n  --without-selinux       don't compile with SELinux support\n  --without-gnutls        don't use -lgnutls for SSL/TLS support\n  --without-zlib          don't compile with zlib decompression support\n  --without-modules       don't compile with dynamic modules support\n  --without-threads       don't compile with elisp threading support\n  --with-cygwin32-native-compilation\n                          use native compilation on 32-bit Cygwin\n  --without-xinput2       don't use version 2 of the X Input Extension for\n                          input\n  --with-small-ja-dic     generate a smaller-size Japanese dictionary\n  --with-file-notification=LIB\n                          use a file notification library (LIB one of: yes,\n                          inotify, kqueue, gfile, w32, no)\n  --with-xwidgets         enable use of xwidgets in Emacs buffers (requires\n                          gtk3 or macOS Cocoa)\n  --with-be-app           enable use of Haiku's Application Kit as a window\n                          system\n  --with-be-cairo         enable use of cairo under Haiku's Application Kit\n  --without-compress-install\n                          don't compress some files (.el, .info, etc.) when\n                          installing. Equivalent to: make GZIP_PROG= install\n  --with-gameuser=USER_OR_GROUP\n                          user for shared game score files. An argument\n                          prefixed by ':' specifies a group instead.\n  --with-gnustep-conf=FILENAME\n                          name of GNUstep configuration file to use on systems\n                          where the command 'gnustep-config' does not work;\n                          default $GNUSTEP_CONFIG_FILE, or\n                          /etc/GNUstep/GNUstep.conf\n  --with-native-compilation[=TYPE]\n                          compile with Emacs Lisp native compiler support. The\n                          TYPE 'yes' (or empty) means to enable it and compile\n                          natively preloaded Lisp files; 'no' means to disable\n                          it; 'aot' will make the build process compile all\n                          the Lisp files in the tree natively ahead of time.\n                          (This will usually be quite slow.)\n  --with-x                use the X Window System\n  --without-libgmp        do not use the GNU Multiple Precision (GMP) library;\n                          this is the default on systems lacking libgmp.\n  --without-included-regex\n                          don't compile regex; this is the default on systems\n                          with recent-enough versions of the GNU C Library\n                          (use with caution on other systems).\n</code></pre>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2023/10/21/build-emacs-from-source-on-debian-linux/#references","title":"References","text":"<ul> <li>Emacs 28.1 whats new - a very detailed description of new features in Emacs 28.1</li> <li>Emacs Wiki - Building Emacs - base instructions for building Emacs</li> <li>Ubuntu Emacs LISP team PPA - nightly builds from the latest Emacs commits</li> </ul> <p>Thank you</p> <p>practicalli GitHub profile I @practical_li</p>","tags":["ubuntu","spacemacs","emacs"]},{"location":"2024/01/20/safeguard-agains-git-commit-spoofing/","title":"Safeguard agains Git Commit Spoofing","text":"<p>Git Commit Spoofing is where a person uses the Git identity of another person to modify commits pushed to GitHub, assuming they can obtain write permission to a branch or via a PR.</p> <p>Signing is especially useful for those contributing changes via a pull request.  Signing provides greater confidence that the contribution is from a verifyable account.</p> <p>Working in the Financial sector for many years, signing of commits has become manditory to reduce risk and increase traceability for audit trails.</p> <p>All Practicalli commits are now signed using a passphrase protected SSH key, registered as a signing key with the GitHub account.  All contributions via pull request should be also be signed, either with GPG or SSH keys.</p>","tags":["git"]},{"location":"2024/01/20/safeguard-agains-git-commit-spoofing/#safeguard-options","title":"Safeguard Options","text":"<ul> <li>Limit user accounts with write access to the repository</li> <li>Mandate authentication keys on all GitHub accounts, SSH keys with passphrase</li> <li>Sign commits and annotated tags via SSH or GPG keys</li> </ul> <p>Signing commits and tags with SSH keys is the approach covered in the rest of the article.</p>","tags":["git"]},{"location":"2024/01/20/safeguard-agains-git-commit-spoofing/#spoof-a-commit","title":"Spoof a commit","text":"<p>With write access to a shared git repository, spoofing commits is trivial.</p> <p>Use <code>git log</code> to look through the commit history of the repository and copy information from the <code>Author</code> field. </p> <p>Set the git client configuraiton to be the same as one of the existing author fields to spoof with that account.</p> <p>Set Git Identity</p> <pre><code>git config --global user.email \"existing-author@domain.tld\"\ngit config --global user.name \"existing author name\"\n</code></pre> <p>Creating a malicious change, stage and create a commit. The Author field on the new commit will be the same as that of the existing commit.</p> <p>Amending an existing commit is a more likely approach to masking a malicious change than creating a new commit.</p> <p>Stage the change and then use the <code>--amend</code> option to create an updated commit which will still have the existing authors information. </p> <p>To avoid changing identity each time a spoof is made, multiple git identities can be configured using <code>includeIf</code> based on path, so repositories to be spoofed would be kept in the same parent directory.</p>","tags":["git"]},{"location":"2024/01/20/safeguard-agains-git-commit-spoofing/#ssh-keys","title":"SSH Keys","text":"<p>Generate an SSH key using the ED25310 type, using a verified email address added to the GitHub user account. The SSH key should be created by a passphrase for greater security, saving the passphrase to the operating system key ring for convienience.</p> <p>Generate an SSH Key</p> <pre><code>ssh-keygen -t ed25519 -C \"name@domain.tld\"\n</code></pre> <p>SSH Key generation - Practicalli Engineering Playbook </p>","tags":["git"]},{"location":"2024/01/20/safeguard-agains-git-commit-spoofing/#sign-commits-and-tags","title":"Sign commits and tags","text":"<p>Configure the local Git client to automtically sign every commit or annotated tag, using either an SSH or GPG key.</p> <p>configured to use SSH or GPG signing, using an email account registered and verified in the GitHub user account.</p> <p>A public SSH or GPG key is added as a security key to a GitHub user account.</p> <p>The private key is used to sign each commit and annotated tag.</p> <p>TODO: screenshot of local verification in an editor / terminal git log</p> <p>TODO: add configuration for local self-verification.</p> <p>When the signed commit or tag is pushed to GitHub, the signature is checked against the public key registered with the user account and the change marked as verified if they match.</p> <p>TODO: screenshot of verified commit and method used for verification.</p> <p>Unless a private key is shared with others, then this is a very strong approach to verifying the source of the contribution.</p>","tags":["git"]},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2023/","title":"2023","text":""},{"location":"archive/2022/","title":"2022","text":""},{"location":"category/clojure-cli/","title":"clojure-cli","text":""},{"location":"category/emacs/","title":"emacs","text":""},{"location":"category/debian/","title":"debian","text":""}]}