{"version": "https://jsonfeed.org/version/1", "title": "Practicalli Software Development", "home_page_url": "https://practical.li/blog/", "feed_url": "https://practical.li/blog/feed_json_updated.json", "description": "Practical guide to Clojure programming language and Clojure REPL driven development", "icon": null, "authors": [{"name": "Practicalli"}], "language": "en", "items": [{"id": "https://practical.li/blog/2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/", "url": "https://practical.li/blog/2023/05/17/accessing-aws-with-clojure-from-scratch---simple-approach/", "title": "Accessing AWS with Clojure from scratch - simple approach", "content_html": "<p><img alt=\"alternative text\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/aws-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p><a href=\"https://github.com/cognitect-labs/aws-api\">Cognitect Labs AWS API</a> is an excellent data driven Clojure library for interacting with AWS from code.  Essentially a client for an AWS Service is created which operations are invoked.  The project includes working code examples (<em>once a working AWS account is configured</em>).</p>\n<p>The hardest is configuring suitable AWS accounts, programmatic access and service permissions, especially when new to AWS.  This article starts with nothing and steps through the simplest and quickest AWS account and permission setup, using the <a href=\"https://aws.amazon.com/free/\">\"AWS Free Tier\"</a>.  Note: every service has quota limits and some services are only free for a period of time (free trials &amp; 12 months free).</p>\n<p>The approach outlined is not intended for commercial work, only the bare essentials to start exploring what is possible with the Cognitect Labs library.  (Or you could try out <a href=\"https://localstack.cloud/\">LocalStack if you have docker installed locally</a>).</p>", "image": "https://practical.li/blog/assets/images/social/posts/access-aws-with-clojure-from-scratch.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [], "tags": ["aws", "clojure", "cognitect-labs"]}, {"id": "https://practical.li/blog/2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/", "url": "https://practical.li/blog/2022/05/16/freedesktoporg-xdg-standard-for-clojure-development-tools/", "title": "FreeDesktop.org XDG standard for Clojure development tools", "content_html": "<p><img alt=\"Debian Linux Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/debian-linux-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>The <a href=\"https://www.freedesktop.org/wiki/Specifications/basedir-spec/\">:globe_with_meridians: FreeDesktop.org XDG basedir standard</a> defines specific locations to store all user configuration, data files and caches.</p>\n<p>Without the XDG standard, these files and directories are often mixed together and stored in the <code>$HOME</code>  of the users account, making it more challenging to backup or version control.</p>\n<p>Development tools such as NeoVim, Emacs, Clojure CLI  and Clojure LSP support the XDG specification, although some tools like Leiningen required a little help.  There are simple approaches to work-around the limitations of tools that don't conform.</p>", "image": "https://practical.li/blog/assets/images/social/posts/adopt-FreeDesktop.org-XDG-standard-for-configuration-files.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure-cli", "debian", "debian", "emacs", "neovim"]}, {"id": "https://practical.li/blog/2019/12/01/advent-of-parens-2019---feast-on-clojure-this-holiday-season/", "url": "https://practical.li/blog/2019/12/01/advent-of-parens-2019---feast-on-clojure-this-holiday-season/", "title": "Advent Of Parens 2019 - feast on Clojure this holiday season", "content_html": "<!-- GitHub issue:  -->\n<!-- https://github.com/practicalli/blog-content/issues/34 -->\n\n<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/clojure-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>The holiday season is know for over indulge, so why not stuff your head full of Clojure and functional programming.  Its far healthier than the alternatives :)</p>\n<p>To help you indulge, <a href=\"https://lambdaisland.com/blog/2019-11-25-advent-of-parens\">Arne from LambdaIsland</a>{target=_blank}, <a href=\"https://porkostomus.gitlab.io/\">Bobby Towers</a>{target=_blank}, <a href=\"https://alexanderoloo.com/\">Alexander Oloo</a>{target=_blank} and I are writing a blog post each day as part of the Advent Of Parens 2019 celebration.  Every day we plan to publish a short posts that share tips and experiences with functional programming and Clojure.</p>\n<p>You can find the articles I am planning to write on the <a href=\"https://github.com/practicalli/blog-content/projects/1?card_filter_query=label%3Aadvent-of-parens\">:fontawesome-brands-github: practicalli blog project board</a>{target=_blank}.</p>\n<p>While you wait to open these posts each day of December, I am kickstarting your feast of Clojure in this article.</p>\n<p>I also encourage you to take some time over the holiday season to practice Clojure</p>\n<ul>\n<li><a href=\"/posts/clojure-advent-of-code-2019/\">Clojure Advent of Code</a>{target=_blank}</li>\n<li><a href=\"https://www.youtube.com/watch?v=MZcuL4lRw5E&amp;list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv\">:fontawesome-brands-youtube: Practicalli Clojure study group</a>{target=_blank}</li>\n</ul>", "image": "https://practical.li/blog/assets/images/social/posts/advent-of-parens-2019.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["advent-of-parens", "clojure", "clojure"]}, {"id": "https://practical.li/blog/2021/08/28/automate-cryogen-clojure-blog-with-github-actions/", "url": "https://practical.li/blog/2021/08/28/automate-cryogen-clojure-blog-with-github-actions/", "title": "Automate Cryogen Clojure blog with GitHub Actions", "content_html": "<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/cryogen-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p><a href=\"https://practical.li/blog/posts/clojure-powered-blogging-with-cryogen/\">Practicalli uses Cryogen static site generator for its blog website</a>.  Cryogen is fast and simple to use thanks to the Clojure EDN file used for configuration.</p>\n<p>Cryogen documentation shows <a href=\"https://cryogenweb.org/docs/deploying-to-github-pages.html\">how to publish a Cryogen blog to GitHub pages</a> using Git command.  The deployment can be automated using GitHub actions, so that a new version of the site is deployed when Pull Requests are merged to the specified branch (or on direct commits to that branch).</p>", "image": "https://practical.li/blog/assets/images/social/posts/automate-cryogen-clojure-blog-with-github-actions.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["cryogen", "github-action", "static-site"]}, {"id": "https://practical.li/blog/2022/10/30/build-and-run-clojure-with-multi-stage-dockerfile/", "url": "https://practical.li/blog/2022/10/30/build-and-run-clojure-with-multi-stage-dockerfile/", "title": "Build and run Clojure with Multi-stage Dockerfile", "content_html": "<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/docker-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Deployment of Clojure is very simple, only an Uberjar archive file (Clojure Project and Clojure run-time) and the Java Run-time Environment (JRE) are required.</p>\n<p>A Clojure service rarely works in isolation and although many services are access via a network connection (defined in Environment Variables), provisioning containers to build and run Clojure along with any other services can be valuable as complexity of the architecture grows.</p>\n<p>A <a href=\"https://github.com/practicalli/clojure-app-template/blob/main/Dockerfile\">Multi-stage <code>Dockerfile</code></a> is an effective way to build and run Clojure projects in continuous integration pipelines and during local development where multiple services are required for testing.</p>\n<p><a href=\"https://hub.docker.com/_/amazoncorretto\">Docker Hub</a> provides a wide range of images, supporting development, continuous integration and system integration testing.</p>", "image": "https://practical.li/blog/assets/images/social/posts/build-and-run-clojure-with-multistage-dockerfile.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure", "docker", "docker", "java", "jvm"]}, {"id": "https://practical.li/blog/2022/05/16/building-emacs-28-on-ubuntu-linux/", "url": "https://practical.li/blog/2022/05/16/building-emacs-28-on-ubuntu-linux/", "title": "Building Emacs 28 on Ubuntu Linux", "content_html": "<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/emacs-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Emacs 28.1 is <a href=\"https://www.masteringemacs.org/article/whats-new-in-emacs-28-1\" title=\"What is new in Emacs 28.1\">a feature packed release</a> and includes native compilation to significantly increase the speed of all Emacs software packages installed.  This is a very noticeable difference, especially when Emacs is at the center of your developer workflow.</p>\n<p>Ubuntu hasn't packaged Emacs 28.1 yet, although its <em>usually</em> straight forward to build Emacs yourself.</p>", "image": "https://practical.li/blog/assets/images/social/posts/build-emacs-28-on-ubuntu.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["emacs"]}, {"id": "https://practical.li/blog/2019/12/02/clojure-advent-of-code---a-fun-way-to-learn/", "url": "https://practical.li/blog/2019/12/02/clojure-advent-of-code---a-fun-way-to-learn/", "title": "Clojure Advent Of Code - a fun way to learn", "content_html": "<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/clojure-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Advent of Code is the annual coding challenge with a festive theme.  Each day there is a new challenge in two parts, the first fairly easy the second a little more involved.  The challenges are an investment of your time to complete them all, although even trying just a few is enough to help you think in different ways.</p>\n<p>Every programming language requires regular practice to maintain your skills.  A full time developer role gives you lots of opportunities to practice every day, however, its often focused in around solving problems within a specific business domain, with little time to explore others.  The Advent of Code puts you in a different domain, so its great for extending your coding experiences.</p>\n<p>Solving challenges in a different language is another great way to extend your experiences, so here are some tips and examples for solving the advent of code in Clojure.</p>\n<!-- GitHub issue -->\n<!-- https://github.com/practicalli/blog-content/issues/22 -->", "image": "https://practical.li/blog/assets/images/social/posts/clojure-advent-of-code-2019.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure", "code-challenge"]}, {"id": "https://practical.li/blog/2020/03/13/web-scraping-with-clojure---scraping-hacker-news/", "url": "https://practical.li/blog/2020/03/13/web-scraping-with-clojure---scraping-hacker-news/", "title": "Web Scraping with Clojure - Scraping Hacker News", "content_html": "<p><img alt=\"Practicalli Clojure Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/clojure-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p><a href=\"https://github.com/cgrand/enlive\">Enlive</a>{target=_blank} is a Clojure library that can be used for generating dynamic server-side content as well as scraping websites.</p>\n<p>Scraping websites is sometimes required when they do not provide an API.  Although Hacker News does have an API, will show how to scrape its website using Enlive's selectors.</p>", "image": "https://practical.li/blog/assets/images/social/posts/web-scraping-with-clojure-hacking-hacker-news.png", "date_modified": "2024-02-04T00:06:02+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure"]}, {"id": "https://practical.li/blog/2023/08/24/expose-clojure-service-using-ngrok/", "url": "https://practical.li/blog/2023/08/24/expose-clojure-service-using-ngrok/", "title": "Expose Clojure Service using Ngrok", "content_html": "<p>Exposing a local running services can be valuable when writing apps and web-hooks for Cloud API products, e.g. Slack, Atlassian Confluence, Hasura, Salesforce, etc.</p>\n<p>ngrok exposes local networked services behinds NATs and firewalls to the public internet over a secure tunnel.</p>\n<p><a href=\"https://ngrok.com/signup\">Create a free ngrok account</a> to get an authorisation token for use with the ngrok agent to create a secure tunnel.  Or add an SSH public key to use SSH reverse tunnel with the ngrok service.</p>", "image": "https://practical.li/blog/assets/images/social/posts/expose-local-clojure-service-with-ngrok.png", "date_modified": "2024-02-04T00:05:11+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure", "clojure", "ngrok"]}, {"id": "https://practical.li/blog/2023/10/21/build-emacs-from-source-on-debian-linux/", "url": "https://practical.li/blog/2023/10/21/build-emacs-from-source-on-debian-linux/", "title": "Build Emacs from source on Debian Linux", "content_html": "<p><img alt=\"Practicalli Emacs Logo\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/emacs-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Emacs 29 is the current stable release, adding major features: Eglot LSP client, Tree-Sitter language parser and <code>package.el</code> package install from Git repositories. </p>\n<p>Building from source is a convenient way to try Emacs features in advance, especially useful for those maintaining or developing new tools on top of Emacs.</p>\n<p>??? INFO \"Emacs 29 Features\"\n    <a href=\"https://blog.phundrak.com/emacs-29-what-can-we-expect/\">Emacs 29 - what to expect</a> - a brief summary of the major features</p>", "image": "https://practical.li/blog/assets/images/social/posts/build-emacs-from-source-on-debian-linux.png", "date_modified": "2024-02-04T00:03:27+00:00", "authors": [{"name": "practicalli"}], "tags": ["debian", "emacs", "emacs", "spacemacs"]}, {"id": "https://practical.li/blog/2024/01/20/safeguard-against-git-commit-spoofing/", "url": "https://practical.li/blog/2024/01/20/safeguard-against-git-commit-spoofing/", "title": "Safeguard against Git Commit Spoofing", "content_html": "<p><img alt=\"alternative text\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/github-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Git Commit Spoofing is where a person uses the Git identity of another person to modify commits pushed to GitHub, assuming they can obtain write permission to a branch or via a PR.</p>\n<p>Signing is especially useful for those contributing changes via a pull request.  Signing provides greater confidence that the contribution is from a verifyable account.</p>\n<p>Working in the Financial sector for many years, signing of commits has become manditory to reduce risk and increase traceability for audit trails.</p>\n<p>All Practicalli commits are now signed using a passphrase protected SSH key, registered as a signing key with the GitHub account.  All contributions via pull request should be also be signed, either with GPG or SSH keys.</p>", "image": "https://practical.li/blog/assets/images/social/posts/git-commit-signing-to-avoid-spoofing.png", "date_modified": "2024-02-03T20:55:07+00:00", "authors": [{"name": "practicalli"}], "tags": ["git", "git"]}, {"id": "https://practical.li/blog/2024/01/29/essential-tooling-for-clojure-development/", "url": "https://practical.li/blog/2024/01/29/essential-tooling-for-clojure-development/", "title": "Essential tooling for Clojure development", "content_html": "<p><img alt=\"alternative text\" src=\"https://github.com/practicalli/graphic-design/blob/live/topic-images/clojure-logo-name.png?raw=true\">{align=right loading=lazy style=\"width:240px\"}</p>\n<p>Clojure development benefits from great tooling focused around an editor (or IDE).</p>\n<p>Practicalli uses many features of a Clojure aware editor with a bias towards highly effective interaction with the REPL, user actions driven exclusively via the keyboard and an uncluttered user interface.</p>\n<p>Practicalli Clojure provides <a href=\"https://practicalli/clojure/clojure-editors/\">an overview of Clojure editors</a> and the plugins that provide Clojure support, e.g. Emacs, Neovim, VS Code, Pulsar and Sublime.  </p>\n<p>??? HINT \"Practicalli preferred editors\"\n    LightTable was the editor used in the early years of learning Clojure as it was simple to use and provided instant feedback as code was typed.</p>\n<pre><code>Once Spacemacs was release, Emacs with CIDER became the predominant editor for many years.\n\nTreemacs and LSP have matured so [Neovim and Conjure](https://practical.li/neovim/) has been adopted to provide a fast editing environment with streamlined key bindings for Clojure development.\n</code></pre>", "image": "https://practical.li/blog/assets/images/social/posts/essential-tooling-for-clojure-development.png", "date_modified": "2024-02-03T18:53:20+00:00", "authors": [{"name": "practicalli"}], "tags": ["clojure", "clojure"]}]}